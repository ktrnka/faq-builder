{
  "submission": {
    "id": "1jk0jn2",
    "title": "ML experiments and evolving codebase",
    "author": "Level-Letterhead-109",
    "selftext": "Hello,\n\nFirst post on this subreddit. I am a self taught ML practioner, where most learning has happened out of need. My PhD research is at the intersection of 3d printing and ML.\n\nOver the last few years, my research code has grown, its more than just a single notebook with each cell doing a ML lifecycle task.\n\nI have come to learn the importance of managing code, data, configurations and focus on reproducibility and readability.\n\nHowever, it often leads to slower iterations of actual model training work. I have not quite figured out to balance writing good code with running my ML training experiments. Are there any guidelines I can follow?\n\nFor now, something I do is I try to get a minimum viable code up and running via jupyter notebooks. Even if it is hard coded configurations, minimal refactoring, etc.\n\nThen after training the model this way for a few times, I start moving things to scripts. Takes forever to get reliable results though.",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Hello,</p>\n\n<p>First post on this subreddit. I am a self taught ML practioner, where most learning has happened out of need. My PhD research is at the intersection of 3d printing and ML.</p>\n\n<p>Over the last few years, my research code has grown, its more than just a single notebook with each cell doing a ML lifecycle task.</p>\n\n<p>I have come to learn the importance of managing code, data, configurations and focus on reproducibility and readability.</p>\n\n<p>However, it often leads to slower iterations of actual model training work. I have not quite figured out to balance writing good code with running my ML training experiments. Are there any guidelines I can follow?</p>\n\n<p>For now, something I do is I try to get a minimum viable code up and running via jupyter notebooks. Even if it is hard coded configurations, minimal refactoring, etc.</p>\n\n<p>Then after training the model this way for a few times, I start moving things to scripts. Takes forever to get reliable results though.</p>\n</div><!-- SC_ON -->",
    "url": "https://www.reddit.com/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/",
    "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/",
    "subreddit": "MLQuestions",
    "created_utc": 1742953296.0,
    "score": 7,
    "ups": 7,
    "downs": 0,
    "upvote_ratio": 1.0,
    "num_comments": 10,
    "is_self": true,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "locked": false,
    "archived": false,
    "distinguished": null,
    "link_flair_text": "Other ❓",
    "timestamp": "2025-03-25T18:41:36"
  },
  "comments": [
    {
      "id": "mjrro6i",
      "author": "silently--here",
      "body": "I disagree with the notion that good quality code leads to slower iterations. Writing code in a proper way allows you to maintain and refactor it easily. This leads to higher velocity. If you are very accustomed to jupyter notebooks, I would highly suggest using autoreload jupyter magic functionality! This allows you to write code in a proper manner, while also having a notebook to run and see the results with code changes reflected correctly without having to restart the notebook.",
      "body_html": "<div class=\"md\"><p>I disagree with the notion that good quality code leads to slower iterations. Writing code in a proper way allows you to maintain and refactor it easily. This leads to higher velocity. If you are very accustomed to jupyter notebooks, I would highly suggest using autoreload jupyter magic functionality! This allows you to write code in a proper manner, while also having a notebook to run and see the results with code changes reflected correctly without having to restart the notebook.</p>\n</div>",
      "created_utc": 1742956688.0,
      "score": 5,
      "ups": 5,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mjrro6i/",
      "parent_id": "t3_1jk0jn2",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-03-25T19:38:08"
    },
    {
      "id": "mjsz0h8",
      "author": "Level-Letterhead-109",
      "body": "These are very useful and actionable tips, thanks!\n\nCould you elaborate on this a bit more? \n\n“the ability to spin off whole alternate timelines of your experiments by branching your commit history”",
      "body_html": "<div class=\"md\"><p>These are very useful and actionable tips, thanks!</p>\n\n<p>Could you elaborate on this a bit more? </p>\n\n<p>“the ability to spin off whole alternate timelines of your experiments by branching your commit history”</p>\n</div>",
      "created_utc": 1742980259.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mjsz0h8/",
      "parent_id": "t3_1jk0jn2",
      "depth": 0,
      "is_submitter": true,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-03-26T02:10:59"
    },
    {
      "id": "mjwjaxo",
      "author": "trnka",
      "body": "That sounds like a normal process to me, and I've been in industry for a while.\n\nOn thing that helped me is realizing that a core part of the problem is the uncertainty in how long the code will last. With research or prototype code, the code might stay around for 10 minutes before being replaced or it might last for years. You don't always know when you're writing it, so you don't always know how much to optimize for iteration speed or optimize for maintainability, testability, etc.\n\nSome lightweight tips that can help:\n\n* Restart and rerun your notebook periodically throughout the day to catch bugs before they become cumbersome\n* When possible, use functions and put a lightweight test of the function in the notebook cell (test small, independent pieces)\n* In many cases, it's going to be easier to put assertions in your code rather than writing a full test and those can help catch bugs earlier\n* Once your idea is working, that's a good time to take a step back and improve it (especially if it's towards the end of the day / end of the week - you want it to be easy to pick up)",
      "body_html": "<div class=\"md\"><p>That sounds like a normal process to me, and I&#39;ve been in industry for a while.</p>\n\n<p>On thing that helped me is realizing that a core part of the problem is the uncertainty in how long the code will last. With research or prototype code, the code might stay around for 10 minutes before being replaced or it might last for years. You don&#39;t always know when you&#39;re writing it, so you don&#39;t always know how much to optimize for iteration speed or optimize for maintainability, testability, etc.</p>\n\n<p>Some lightweight tips that can help:</p>\n\n<ul>\n<li>Restart and rerun your notebook periodically throughout the day to catch bugs before they become cumbersome</li>\n<li>When possible, use functions and put a lightweight test of the function in the notebook cell (test small, independent pieces)</li>\n<li>In many cases, it&#39;s going to be easier to put assertions in your code rather than writing a full test and those can help catch bugs earlier</li>\n<li>Once your idea is working, that&#39;s a good time to take a step back and improve it (especially if it&#39;s towards the end of the day / end of the week - you want it to be easy to pick up)</li>\n</ul>\n</div>",
      "created_utc": 1743023613.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mjwjaxo/",
      "parent_id": "t3_1jk0jn2",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-03-26T14:13:33"
    },
    {
      "id": "mjs25if",
      "author": "DigThatData",
      "body": "congratulations on your project maturing to the point where you need to manage this level of complexity!\n\na couple of general recommendations:\n\n1. version control. create a github account if you don't have one already, and create a repository at least for your notebooks folder, and a separate repository for your main research project.\n\n  One of the super powers version control grants you is the ability to spin off whole alternate timelines of your experiments by \"branching\" your commit history.\n\n2. Separate concerns. Your notebook is responsible for a variety of things which I propose you should isolate from each other:\n  * defining the code that actually runs your experiments\n  * exploring and preparing the data\n  * defining the configuration for each respective experiment\n  * actually launching experiments\n\n  Of those bullet points, I'd propose that \"exploring the data\" is the only one that should be in a notebook. Put the reusable machinery in one file, import it to be used in another. Each configuration should be a single separate file, with files grouped by experiment. YAML and JSON are popular formats here. I'm partial to the OmegaConf library. \n\n3. write tests. There's basically no excuse to have zero tests anymore with LLMs at the level of usability and availability they've reached. Literally just show your code to any LLM and ask it to write you some tests. This can make making signficant changes to your code a little more work than it would otherwise be, but basically provides you with a kind of safety net that makes it harder to break things by accident.",
      "body_html": "<div class=\"md\"><p>congratulations on your project maturing to the point where you need to manage this level of complexity!</p>\n\n<p>a couple of general recommendations:</p>\n\n<ol>\n<li><p>version control. create a github account if you don&#39;t have one already, and create a repository at least for your notebooks folder, and a separate repository for your main research project.</p>\n\n<p>One of the super powers version control grants you is the ability to spin off whole alternate timelines of your experiments by &quot;branching&quot; your commit history.</p></li>\n<li><p>Separate concerns. Your notebook is responsible for a variety of things which I propose you should isolate from each other:</p>\n\n<ul>\n<li>defining the code that actually runs your experiments</li>\n<li>exploring and preparing the data</li>\n<li>defining the configuration for each respective experiment</li>\n<li>actually launching experiments</li>\n</ul>\n\n<p>Of those bullet points, I&#39;d propose that &quot;exploring the data&quot; is the only one that should be in a notebook. Put the reusable machinery in one file, import it to be used in another. Each configuration should be a single separate file, with files grouped by experiment. YAML and JSON are popular formats here. I&#39;m partial to the OmegaConf library. </p></li>\n<li><p>write tests. There&#39;s basically no excuse to have zero tests anymore with LLMs at the level of usability and availability they&#39;ve reached. Literally just show your code to any LLM and ask it to write you some tests. This can make making signficant changes to your code a little more work than it would otherwise be, but basically provides you with a kind of safety net that makes it harder to break things by accident.</p></li>\n</ol>\n</div>",
      "created_utc": 1742960870.0,
      "score": 0,
      "ups": 0,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mjs25if/",
      "parent_id": "t3_1jk0jn2",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-03-25T20:47:50"
    },
    {
      "id": "mjsg5n9",
      "author": "Level-Letterhead-109",
      "body": "You are absolutely correct in your first sentence. The \"slower iterations\" is not because of good quality code. It is more because of my speed/skills at writing good quality code. Thanks for the tip about autoreload jupyter magic!",
      "body_html": "<div class=\"md\"><p>You are absolutely correct in your first sentence. The &quot;slower iterations&quot; is not because of good quality code. It is more because of my speed/skills at writing good quality code. Thanks for the tip about autoreload jupyter magic!</p>\n</div>",
      "created_utc": 1742968024.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mjsg5n9/",
      "parent_id": "t1_mjrro6i",
      "depth": 1,
      "is_submitter": true,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-03-25T22:47:04"
    },
    {
      "id": "mjwa5mt",
      "author": "DigThatData",
      "body": "imagine you changed something a month ago and now have a bunch of changes stacked on top of that which may or may not depend on that change. let's say you now want to roll back that change. A commit history is like a wikipedia article's change history: it let's you go back in time to the state of the code for any of your commits. after you travel back in time, you can create a new branch of your code starting at that point and start putting new changes on top of it. Depending on what you've changed since that commit, you can potentially undo a single change form your history, and then apply the rest of your history on top of that change to get an alternate version of your codebase. I was being a bit poetic with the alternate timelines thing: in the example I presented, the new branch we created represents the \"alternate timeline\" in which you'd never made that change you wanted to rollback. with these situations encapsulated in two separate branches, we can actually switch back and forth between them, making new changes isolated to just one or the other.",
      "body_html": "<div class=\"md\"><p>imagine you changed something a month ago and now have a bunch of changes stacked on top of that which may or may not depend on that change. let&#39;s say you now want to roll back that change. A commit history is like a wikipedia article&#39;s change history: it let&#39;s you go back in time to the state of the code for any of your commits. after you travel back in time, you can create a new branch of your code starting at that point and start putting new changes on top of it. Depending on what you&#39;ve changed since that commit, you can potentially undo a single change form your history, and then apply the rest of your history on top of that change to get an alternate version of your codebase. I was being a bit poetic with the alternate timelines thing: in the example I presented, the new branch we created represents the &quot;alternate timeline&quot; in which you&#39;d never made that change you wanted to rollback. with these situations encapsulated in two separate branches, we can actually switch back and forth between them, making new changes isolated to just one or the other.</p>\n</div>",
      "created_utc": 1743021143.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mjwa5mt/",
      "parent_id": "t1_mjsz0h8",
      "depth": 1,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-03-26T13:32:23"
    },
    {
      "id": "mjxz75t",
      "author": "Level-Letterhead-109",
      "body": "Thank you my friend, I particularly appreciate the advice on how to use notebooks more cleanly.\n\nIt serves a great intermediate step i can take. Something before considering whether to move things to .py files",
      "body_html": "<div class=\"md\"><p>Thank you my friend, I particularly appreciate the advice on how to use notebooks more cleanly.</p>\n\n<p>It serves a great intermediate step i can take. Something before considering whether to move things to .py files</p>\n</div>",
      "created_utc": 1743040541.0,
      "score": 2,
      "ups": 2,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mjxz75t/",
      "parent_id": "t1_mjwjaxo",
      "depth": 1,
      "is_submitter": true,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-03-26T18:55:41"
    },
    {
      "id": "mv90um9",
      "author": "Level-Letterhead-109",
      "body": "Hi u/DigThatData, this comment of yours has been on my mind all this time. My codebase and experimental workflow building has been with this in mind. I come from a very hands-on 'lets look at this under a microscope and take notes' type of materials science background, so it took me a while. But I get it now!\n\nIt really is a super-power.....\n\n>One of the super powers version control grants you is the ability to spin off whole alternate timelines of your experiments by \"branching\" your commit history.",
      "body_html": "<div class=\"md\"><p>Hi <a href=\"/u/DigThatData\">u/DigThatData</a>, this comment of yours has been on my mind all this time. My codebase and experimental workflow building has been with this in mind. I come from a very hands-on &#39;lets look at this under a microscope and take notes&#39; type of materials science background, so it took me a while. But I get it now!</p>\n\n<p>It really is a super-power.....</p>\n\n<blockquote>\n<p>One of the super powers version control grants you is the ability to spin off whole alternate timelines of your experiments by &quot;branching&quot; your commit history.</p>\n</blockquote>\n</div>",
      "created_utc": 1748701887.0,
      "score": 2,
      "ups": 2,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mv90um9/",
      "parent_id": "t1_mjwa5mt",
      "depth": 2,
      "is_submitter": true,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-05-31T07:31:27"
    },
    {
      "id": "mjxzg18",
      "author": "Level-Letterhead-109",
      "body": "Had to read this a couple of times, but once it clicked, it made complete sense! Thanks!",
      "body_html": "<div class=\"md\"><p>Had to read this a couple of times, but once it clicked, it made complete sense! Thanks!</p>\n</div>",
      "created_utc": 1743040627.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mjxzg18/",
      "parent_id": "t1_mjwa5mt",
      "depth": 2,
      "is_submitter": true,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-03-26T18:57:07"
    },
    {
      "id": "mv9jjzf",
      "author": "DigThatData",
      "body": ":)",
      "body_html": "<div class=\"md\"><p>:)</p>\n</div>",
      "created_utc": 1748707733.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1jk0jn2/ml_experiments_and_evolving_codebase/mv9jjzf/",
      "parent_id": "t1_mv90um9",
      "depth": 3,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-05-31T09:08:53"
    }
  ],
  "total_comments": 10,
  "fetched_at": "2025-09-13T20:47:10.915476"
}