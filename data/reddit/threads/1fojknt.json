{
  "submission": {
    "id": "1fojknt",
    "title": "Insights from product reviews and NLP limitation‚Äôs ",
    "author": "Short-State-2017",
    "selftext": "\nHi all,\n\nI have a large dataset of product reviews completely random in both length and sentiment. I need to pull insights to help identify how a product can improve based on user reviews. In short, I need to be able to have something scan through a bunch of random comments, categorise by positive, negative and neutral, and to group common issues that pop up i.e if 50 reviews complained about the camera. To then give this to the business to make the necessary changes. \n\nI have done the standard pre processing and options for NLP i.e. data cleaning process of removing unnecessary characters, word stops etc, gather frequency of single, double and triple word combinations. I have then applied textblob, spacy and Vader in different way in order to try and pull some sort of sentiment.\n\nThe issue is, I really find the insights unusable. The packages just don‚Äôt seem to gather the sentiments correctly at all and it just isn‚Äôt usable for my analysis. I also find it struggles when comments have both positive and negative in them, it‚Äôll just pick up either or. \n\nI need to be able to analyse sentences such as ‚ÄúThe product is great overall, but even though the camera is good, the material needs work‚Äù and things along these lines, but these packages just don‚Äôt seem to pickup the sentiments correctly in long drawn out comments with different tones. It‚Äôll ping a sentence which seems negative as positive or visa versa.\n\nThere‚Äôs a ton of comments but if there was like 10 and I did this analysis by eye, I‚Äôd be able to skim something, use my human emotion to gather what I‚Äôm looking for, and execute. \n\nTheres also a LLM option, where I just have that analyse the sentences. I have had great success with this option, and it does what I need. \n\nThis question is moreso surrounding why use NLP if LLM exists? I‚Äôm only a year into this so any guidance is appreciated.",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Hi all,</p>\n\n<p>I have a large dataset of product reviews completely random in both length and sentiment. I need to pull insights to help identify how a product can improve based on user reviews. In short, I need to be able to have something scan through a bunch of random comments, categorise by positive, negative and neutral, and to group common issues that pop up i.e if 50 reviews complained about the camera. To then give this to the business to make the necessary changes. </p>\n\n<p>I have done the standard pre processing and options for NLP i.e. data cleaning process of removing unnecessary characters, word stops etc, gather frequency of single, double and triple word combinations. I have then applied textblob, spacy and Vader in different way in order to try and pull some sort of sentiment.</p>\n\n<p>The issue is, I really find the insights unusable. The packages just don‚Äôt seem to gather the sentiments correctly at all and it just isn‚Äôt usable for my analysis. I also find it struggles when comments have both positive and negative in them, it‚Äôll just pick up either or. </p>\n\n<p>I need to be able to analyse sentences such as ‚ÄúThe product is great overall, but even though the camera is good, the material needs work‚Äù and things along these lines, but these packages just don‚Äôt seem to pickup the sentiments correctly in long drawn out comments with different tones. It‚Äôll ping a sentence which seems negative as positive or visa versa.</p>\n\n<p>There‚Äôs a ton of comments but if there was like 10 and I did this analysis by eye, I‚Äôd be able to skim something, use my human emotion to gather what I‚Äôm looking for, and execute. </p>\n\n<p>Theres also a LLM option, where I just have that analyse the sentences. I have had great success with this option, and it does what I need. </p>\n\n<p>This question is moreso surrounding why use NLP if LLM exists? I‚Äôm only a year into this so any guidance is appreciated.</p>\n</div><!-- SC_ON -->",
    "url": "https://www.reddit.com/r/MLQuestions/comments/1fojknt/insights_from_product_reviews_and_nlp_limitations/",
    "permalink": "/r/MLQuestions/comments/1fojknt/insights_from_product_reviews_and_nlp_limitations/",
    "subreddit": "MLQuestions",
    "created_utc": 1727202429.0,
    "score": 3,
    "ups": 3,
    "downs": 0,
    "upvote_ratio": 1.0,
    "num_comments": 3,
    "is_self": true,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "locked": false,
    "archived": false,
    "distinguished": null,
    "link_flair_text": "Natural Language Processing üí¨",
    "timestamp": "2024-09-24T11:27:09"
  },
  "comments": [
    {
      "id": "lor2gic",
      "author": "trnka",
      "body": "I've done this both ways depending on the kind of data I'm working with. With structured reviews that have scores, I like using traditional NLP/ML approaches of predicting the ratings and using model coefficients. That's quick and can combine textual and non-textual sources of information.\n\nLLMs have been easier for unstructured data. Though it's much more challenging to make sure the output is trustworthy. If I were dealing with a large amount of data, the cost or latency might be issues too.\n\nOne difference I've faced is that I don't really need to extract everything from every review. Usually I'm working with hundreds to thousands of reviews.",
      "body_html": "<div class=\"md\"><p>I&#39;ve done this both ways depending on the kind of data I&#39;m working with. With structured reviews that have scores, I like using traditional NLP/ML approaches of predicting the ratings and using model coefficients. That&#39;s quick and can combine textual and non-textual sources of information.</p>\n\n<p>LLMs have been easier for unstructured data. Though it&#39;s much more challenging to make sure the output is trustworthy. If I were dealing with a large amount of data, the cost or latency might be issues too.</p>\n\n<p>One difference I&#39;ve faced is that I don&#39;t really need to extract everything from every review. Usually I&#39;m working with hundreds to thousands of reviews.</p>\n</div>",
      "created_utc": 1727210938.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1fojknt/insights_from_product_reviews_and_nlp_limitations/lor2gic/",
      "parent_id": "t3_1fojknt",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2024-09-24T13:48:58"
    },
    {
      "id": "lot655v",
      "author": null,
      "body": "you might want to look into Aspect Based Sentiment Analysis its more like fine-grained opinion mining works well with the example you mentioned  ‚ÄúThe product is great overall, but even though the camera is good, the material needs work‚Äù¬†\n\nFinally, use topic analysis too to highlight what is working and what is not working.",
      "body_html": "<div class=\"md\"><p>you might want to look into Aspect Based Sentiment Analysis its more like fine-grained opinion mining works well with the example you mentioned  ‚ÄúThe product is great overall, but even though the camera is good, the material needs work‚Äù¬†</p>\n\n<p>Finally, use topic analysis too to highlight what is working and what is not working.</p>\n</div>",
      "created_utc": 1727240327.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1fojknt/insights_from_product_reviews_and_nlp_limitations/lot655v/",
      "parent_id": "t3_1fojknt",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": true,
      "distinguished": null,
      "timestamp": "2024-09-24T21:58:47"
    }
  ],
  "total_comments": 2,
  "fetched_at": "2025-09-13T20:47:19.759112"
}