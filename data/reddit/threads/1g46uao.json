{
  "submission": {
    "id": "1g46uao",
    "title": "word prediction and a word completion in react",
    "author": "Particular-Storm-184",
    "selftext": "Hi,\n\nI am currently working on a small private project. I want to implement a word prediction and a word completion in React (the app is already finished but the algorithms are still missing). This webapp should help people who cannot speak. Sentences should be entered into the app with a keyboard and the app should complete the words or predict them directly.\n\nHowever, when looking for the right model for word prediction, I reached my limits, as I am new to NLP and there are so many different possibilities. So I wanted to ask if someone with more experience could help me.\n\n**How can I implement a good but fast and low computational Bard or GPT (or another model) for word prediction on the client side?**\n\nI am happy about every idea or suggestion.\n\nFurther information:\n\n* I already have experience with TensorFlow and have therefore thought of TensorFlow-Lite models, which I can then run on the client side.\n* For the word completion I thought of a simple RNN (I have already implemented this, but I am open to tips and alternatives)\n* For the word prediction I was thinking of an LSTM (I have already implemented this, but it is not good yet) or a small GPT or Bard variant.\n* which could also still be important: The models should be designed for the German language",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Hi,</p>\n\n<p>I am currently working on a small private project. I want to implement a word prediction and a word completion in React (the app is already finished but the algorithms are still missing). This webapp should help people who cannot speak. Sentences should be entered into the app with a keyboard and the app should complete the words or predict them directly.</p>\n\n<p>However, when looking for the right model for word prediction, I reached my limits, as I am new to NLP and there are so many different possibilities. So I wanted to ask if someone with more experience could help me.</p>\n\n<p><strong>How can I implement a good but fast and low computational Bard or GPT (or another model) for word prediction on the client side?</strong></p>\n\n<p>I am happy about every idea or suggestion.</p>\n\n<p>Further information:</p>\n\n<ul>\n<li>I already have experience with TensorFlow and have therefore thought of TensorFlow-Lite models, which I can then run on the client side.</li>\n<li>For the word completion I thought of a simple RNN (I have already implemented this, but I am open to tips and alternatives)</li>\n<li>For the word prediction I was thinking of an LSTM (I have already implemented this, but it is not good yet) or a small GPT or Bard variant.</li>\n<li>which could also still be important: The models should be designed for the German language</li>\n</ul>\n</div><!-- SC_ON -->",
    "url": "https://www.reddit.com/r/MLQuestions/comments/1g46uao/word_prediction_and_a_word_completion_in_react/",
    "permalink": "/r/MLQuestions/comments/1g46uao/word_prediction_and_a_word_completion_in_react/",
    "subreddit": "MLQuestions",
    "created_utc": 1728996369.0,
    "score": 2,
    "ups": 2,
    "downs": 0,
    "upvote_ratio": 1.0,
    "num_comments": 3,
    "is_self": true,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "locked": false,
    "archived": false,
    "distinguished": null,
    "link_flair_text": "Natural Language Processing ðŸ’¬",
    "timestamp": "2024-10-15T05:46:09"
  },
  "comments": [
    {
      "id": "ls24s9n",
      "author": "trnka",
      "body": "Approximately how much memory usage are you targeting?\n\nTips:\n\n- It's common to use the same language model for word completion and prediction. Completion is just adding a filter to the words. \n\n- If you want to get fancy in the completion model and you know what keyboard layout they're using, one simple way to handle typos is to match each key with that character and all adjacent keys. If you want to get fancier, you could do a noisy channel model approach (one language model, one typo model)\n\n- For German, it's important to do subword modeling such as byte-pair encoding\n\n- If you need something fast and small for testing, I'd recommend a plain bigram model over words. Those can be very small and they're very fast.\n\n- Some of the often-overlooked parts that have a big impact on quality: The similarity of your training data to what it's actually used for (for example, if it's emails then emails, if it's text messages then text messages) and tokenization\n\n  \nI worked in word prediction for assistive technology for a while, then worked on typing on mobile phones for years at Swype and Nuance. That said, it was all before neural networks took over language modeling.",
      "body_html": "<div class=\"md\"><p>Approximately how much memory usage are you targeting?</p>\n\n<p>Tips:</p>\n\n<ul>\n<li><p>It&#39;s common to use the same language model for word completion and prediction. Completion is just adding a filter to the words. </p></li>\n<li><p>If you want to get fancy in the completion model and you know what keyboard layout they&#39;re using, one simple way to handle typos is to match each key with that character and all adjacent keys. If you want to get fancier, you could do a noisy channel model approach (one language model, one typo model)</p></li>\n<li><p>For German, it&#39;s important to do subword modeling such as byte-pair encoding</p></li>\n<li><p>If you need something fast and small for testing, I&#39;d recommend a plain bigram model over words. Those can be very small and they&#39;re very fast.</p></li>\n<li><p>Some of the often-overlooked parts that have a big impact on quality: The similarity of your training data to what it&#39;s actually used for (for example, if it&#39;s emails then emails, if it&#39;s text messages then text messages) and tokenization</p></li>\n</ul>\n\n<p>I worked in word prediction for assistive technology for a while, then worked on typing on mobile phones for years at Swype and Nuance. That said, it was all before neural networks took over language modeling.</p>\n</div>",
      "created_utc": 1729009124.0,
      "score": 2,
      "ups": 2,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1g46uao/word_prediction_and_a_word_completion_in_react/ls24s9n/",
      "parent_id": "t3_1g46uao",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2024-10-15T09:18:44"
    },
    {
      "id": "ls8x7l5",
      "author": "Particular-Storm-184",
      "body": "Hi, \n\nThanks for the answer. Here is the answer to your questions.\n\n- Storage space: I'm not sure about the storage space. I want a small model so that the loading time of the models is as low as possible. However, the model should also provide good predictors to save as much typing as possible.\n\n- Application: I only want to use the NLP model to complete the words or predict them completely.\n\n\n\nFor more info here my Git: [https://github.com/Ssaammyy36/NextWordPrediction-and-WordCompletion](https://github.com/Ssaammyy36/NextWordPrediction-and-WordCompletion)",
      "body_html": "<div class=\"md\"><p>Hi, </p>\n\n<p>Thanks for the answer. Here is the answer to your questions.</p>\n\n<ul>\n<li><p>Storage space: I&#39;m not sure about the storage space. I want a small model so that the loading time of the models is as low as possible. However, the model should also provide good predictors to save as much typing as possible.</p></li>\n<li><p>Application: I only want to use the NLP model to complete the words or predict them completely.</p></li>\n</ul>\n\n<p>For more info here my Git: <a href=\"https://github.com/Ssaammyy36/NextWordPrediction-and-WordCompletion\">https://github.com/Ssaammyy36/NextWordPrediction-and-WordCompletion</a></p>\n</div>",
      "created_utc": 1729106159.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1g46uao/word_prediction_and_a_word_completion_in_react/ls8x7l5/",
      "parent_id": "t1_ls24s9n",
      "depth": 1,
      "is_submitter": true,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2024-10-16T12:15:59"
    },
    {
      "id": "ls9mbbd",
      "author": "trnka",
      "body": "I'd recommend setting a memory budget. If you'd like it to load as fast as typical webpages, I think the upper end of common webpage dependencies is around 10-15mb so you could set that as a goal. If you're unable to achieve high quality \n\nI'm not aware of pretrained models that would fit in that size, though I haven't kept up to date on the latest advancements in small language models. I didn't find any that small when I searched.\n\nIf you're training your own language model:\n\n* The smallest GPT2 I saw was around 200mb. That said, you could probably find a GPT2 training script and pick parameters to train a smaller one.\n* If you pick a memory budget ahead of time, you can limit your hyperparameter tuning to only models that meet that memory budget. You don't even need to train the models to do that because NN models have fixed memory sizes.\n* In my experience, the embeddings take the biggest amount of memory. One of the many advantages of byte pair encoding is that it allows you to build good models with smaller vocabulary sizes (compared to word-based models), which will save memory.\n* If you end up designing your own neural network, even a basic RNN:\n   * Sharing the embedding weights in both the input and output helps to reduce memory\n   * Reduced precision and quantization help a lot too\n   * Read the GPT2 paper and related papers to see what tricks they use to improve quality and limit memory usage\n\nAlso, I should mention some of the standard evaluation metrics:\n\n* Perplexity: This is commonly used in language modeling research, so you should be able to get a general sense of typical perplexity scores in German testing data.\n* Keystroke savings: For this, you simulate someone typing with your software and measure the percentage reduction in the number of keys pressed compared to typing each key individually.",
      "body_html": "<div class=\"md\"><p>I&#39;d recommend setting a memory budget. If you&#39;d like it to load as fast as typical webpages, I think the upper end of common webpage dependencies is around 10-15mb so you could set that as a goal. If you&#39;re unable to achieve high quality </p>\n\n<p>I&#39;m not aware of pretrained models that would fit in that size, though I haven&#39;t kept up to date on the latest advancements in small language models. I didn&#39;t find any that small when I searched.</p>\n\n<p>If you&#39;re training your own language model:</p>\n\n<ul>\n<li>The smallest GPT2 I saw was around 200mb. That said, you could probably find a GPT2 training script and pick parameters to train a smaller one.</li>\n<li>If you pick a memory budget ahead of time, you can limit your hyperparameter tuning to only models that meet that memory budget. You don&#39;t even need to train the models to do that because NN models have fixed memory sizes.</li>\n<li>In my experience, the embeddings take the biggest amount of memory. One of the many advantages of byte pair encoding is that it allows you to build good models with smaller vocabulary sizes (compared to word-based models), which will save memory.</li>\n<li>If you end up designing your own neural network, even a basic RNN:\n\n<ul>\n<li>Sharing the embedding weights in both the input and output helps to reduce memory</li>\n<li>Reduced precision and quantization help a lot too</li>\n<li>Read the GPT2 paper and related papers to see what tricks they use to improve quality and limit memory usage</li>\n</ul></li>\n</ul>\n\n<p>Also, I should mention some of the standard evaluation metrics:</p>\n\n<ul>\n<li>Perplexity: This is commonly used in language modeling research, so you should be able to get a general sense of typical perplexity scores in German testing data.</li>\n<li>Keystroke savings: For this, you simulate someone typing with your software and measure the percentage reduction in the number of keys pressed compared to typing each key individually.</li>\n</ul>\n</div>",
      "created_utc": 1729114170.0,
      "score": 2,
      "ups": 2,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1g46uao/word_prediction_and_a_word_completion_in_react/ls9mbbd/",
      "parent_id": "t1_ls8x7l5",
      "depth": 2,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2024-10-16T14:29:30"
    }
  ],
  "total_comments": 3,
  "fetched_at": "2025-09-13T20:47:13.657310"
}