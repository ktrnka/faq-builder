{
  "submission": {
    "id": "1k21v4u",
    "title": "What‚Äôs the Best Way to Structure a Data Science Project Professionally?",
    "author": "Material_Remove4853",
    "selftext": "Title says pretty much everything.\n\nI‚Äôve already asked ChatGPT (lol), watched videos and checked out repos like¬†[https://github.com/cookiecutter/cookiecutter](https://github.com/cookiecutter/cookiecutter)¬†and this tutorial¬†[https://www.youtube.com/watch](https://www.youtube.com/watch)?\n\nI also started reading the Kaggle Grandmaster book¬†*‚ÄúApproaching Almost Any Machine Learning Problem‚Äù*, but I still have doubts about how to best structure a data science project to showcase it on GitHub ‚Äî and hopefully impress potential employers (I‚Äôm pretty much a newbie).\n\nSpecifically:\n\n* I don‚Äôt really get the src/ folder ‚Äî is it overkill?That said, I would like to have a model that can be easily re-run whenever needed.\n* What about MLOps ‚Äî should I worry about that already?\n* Regarding virtual environments: I‚Äôm using pip and a requirements.txt. Should I include a .yaml file too?\n* And how do I properly set up setup.py? Is it still important these days?\n\nIf anyone here has experience as a recruiter or has landed a job through their GitHub, I‚Äôd love to hear:\n\n**What‚Äôs the best way to organize a data science project folder today to really impress?**\n\nI‚Äôd really love to showcase some engineering skills alongside my exploratory data science work. I‚Äôm a young student doing my best to land an internship by next year, and I‚Äôm currently focused on learning how to build a well-structured data science project ‚Äî something clean and scalable that could evolve into a bigger project, and be easily re-run or extended over time.\n\nAny advice or tips would mean a lot. Thanks so much in advance!",
    "selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Title says pretty much everything.</p>\n\n<p>I‚Äôve already asked ChatGPT (lol), watched videos and checked out repos like¬†<a href=\"https://github.com/cookiecutter/cookiecutter\">https://github.com/cookiecutter/cookiecutter</a>¬†and this tutorial¬†<a href=\"https://www.youtube.com/watch\">https://www.youtube.com/watch</a>?</p>\n\n<p>I also started reading the Kaggle Grandmaster book¬†<em>‚ÄúApproaching Almost Any Machine Learning Problem‚Äù</em>, but I still have doubts about how to best structure a data science project to showcase it on GitHub ‚Äî and hopefully impress potential employers (I‚Äôm pretty much a newbie).</p>\n\n<p>Specifically:</p>\n\n<ul>\n<li>I don‚Äôt really get the src/ folder ‚Äî is it overkill?That said, I would like to have a model that can be easily re-run whenever needed.</li>\n<li>What about MLOps ‚Äî should I worry about that already?</li>\n<li>Regarding virtual environments: I‚Äôm using pip and a requirements.txt. Should I include a .yaml file too?</li>\n<li>And how do I properly set up setup.py? Is it still important these days?</li>\n</ul>\n\n<p>If anyone here has experience as a recruiter or has landed a job through their GitHub, I‚Äôd love to hear:</p>\n\n<p><strong>What‚Äôs the best way to organize a data science project folder today to really impress?</strong></p>\n\n<p>I‚Äôd really love to showcase some engineering skills alongside my exploratory data science work. I‚Äôm a young student doing my best to land an internship by next year, and I‚Äôm currently focused on learning how to build a well-structured data science project ‚Äî something clean and scalable that could evolve into a bigger project, and be easily re-run or extended over time.</p>\n\n<p>Any advice or tips would mean a lot. Thanks so much in advance!</p>\n</div><!-- SC_ON -->",
    "url": "https://www.reddit.com/r/MLQuestions/comments/1k21v4u/whats_the_best_way_to_structure_a_data_science/",
    "permalink": "/r/MLQuestions/comments/1k21v4u/whats_the_best_way_to_structure_a_data_science/",
    "subreddit": "MLQuestions",
    "created_utc": 1744972872.0,
    "score": 14,
    "ups": 14,
    "downs": 0,
    "upvote_ratio": 0.95,
    "num_comments": 5,
    "is_self": true,
    "over_18": false,
    "spoiler": false,
    "stickied": false,
    "locked": false,
    "archived": false,
    "distinguished": null,
    "link_flair_text": "Beginner question üë∂",
    "timestamp": "2025-04-18T03:41:12"
  },
  "comments": [
    {
      "id": "mnqrt9n",
      "author": "Ok-Web7506",
      "body": "trying to explor this among hte others [https://github.com/kedro-org/kedro](https://github.com/kedro-org/kedro) , I am interested too! following.",
      "body_html": "<div class=\"md\"><p>trying to explor this among hte others <a href=\"https://github.com/kedro-org/kedro\">https://github.com/kedro-org/kedro</a> , I am interested too! following.</p>\n</div>",
      "created_utc": 1744976593.0,
      "score": 3,
      "ups": 3,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1k21v4u/whats_the_best_way_to_structure_a_data_science/mnqrt9n/",
      "parent_id": "t3_1k21v4u",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-04-18T04:43:13"
    },
    {
      "id": "mnrdsya",
      "author": "trnka",
      "body": "> I don‚Äôt really get the src/ folder ‚Äî is it overkill?\n\nIf you're writing a Python library, typically you'll see the top-level folder have the same name as the module. If not, then src/ is common. The purpose is to separate it from other files in your repo (if you have them). So if you have docs/ and such, then having src/ makes sense. If you don't have other types of content in the repo, the top-level src/ isn't as important.\n\n> What about MLOps ‚Äî should I worry about that already?\n\nIf you're training and storing some sort of model, then yeah it'd be good to figure out how to version the model. If you're retraining frequently, it'd be good to think about how you store evaluations and whether it's easy to detect any model problems caused by changes in your training data (if applicable).\n\n> Regarding virtual environments: I‚Äôm using pip and a requirements.txt. Should I include a .yaml file too?\n\npip and requirements is fine, so long as you're installing into a virtual environment. If you aren't already using a virtual environment, I'd suggest uv to manage it. \n\nI'd also recommend making sure a new person can get setup for development quickly and easily. A makefile or similar can help to put those commands in the repo. Depending on your project that could involve installing the correct version of Python, setting up a virtual environment, installing any other third-party tools, etc.\n\n> And how do I properly set up setup.py? Is it still important these days?\n\nIf you're writing a Python module it's necessary, otherwise no.",
      "body_html": "<div class=\"md\"><blockquote>\n<p>I don‚Äôt really get the src/ folder ‚Äî is it overkill?</p>\n</blockquote>\n\n<p>If you&#39;re writing a Python library, typically you&#39;ll see the top-level folder have the same name as the module. If not, then src/ is common. The purpose is to separate it from other files in your repo (if you have them). So if you have docs/ and such, then having src/ makes sense. If you don&#39;t have other types of content in the repo, the top-level src/ isn&#39;t as important.</p>\n\n<blockquote>\n<p>What about MLOps ‚Äî should I worry about that already?</p>\n</blockquote>\n\n<p>If you&#39;re training and storing some sort of model, then yeah it&#39;d be good to figure out how to version the model. If you&#39;re retraining frequently, it&#39;d be good to think about how you store evaluations and whether it&#39;s easy to detect any model problems caused by changes in your training data (if applicable).</p>\n\n<blockquote>\n<p>Regarding virtual environments: I‚Äôm using pip and a requirements.txt. Should I include a .yaml file too?</p>\n</blockquote>\n\n<p>pip and requirements is fine, so long as you&#39;re installing into a virtual environment. If you aren&#39;t already using a virtual environment, I&#39;d suggest uv to manage it. </p>\n\n<p>I&#39;d also recommend making sure a new person can get setup for development quickly and easily. A makefile or similar can help to put those commands in the repo. Depending on your project that could involve installing the correct version of Python, setting up a virtual environment, installing any other third-party tools, etc.</p>\n\n<blockquote>\n<p>And how do I properly set up setup.py? Is it still important these days?</p>\n</blockquote>\n\n<p>If you&#39;re writing a Python module it&#39;s necessary, otherwise no.</p>\n</div>",
      "created_utc": 1744984887.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1k21v4u/whats_the_best_way_to_structure_a_data_science/mnrdsya/",
      "parent_id": "t3_1k21v4u",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-04-18T07:01:27"
    },
    {
      "id": "mnut28i",
      "author": null,
      "body": "My current workflow depends mainly on UV, Ruff, logging and argparse\n\nThe folder structure is \n- Src/ training, wrangling and deployment scripts\n- Bash/ containing .sh to run various jobs from src\n- Data/\n- Models/\n- Plots/\n- Logs/\n\nThat's it. Covers 90% of my uses (traditional ML and statistical modelling).",
      "body_html": "<div class=\"md\"><p>My current workflow depends mainly on UV, Ruff, logging and argparse</p>\n\n<p>The folder structure is \n- Src/ training, wrangling and deployment scripts\n- Bash/ containing .sh to run various jobs from src\n- Data/\n- Models/\n- Plots/\n- Logs/</p>\n\n<p>That&#39;s it. Covers 90% of my uses (traditional ML and statistical modelling).</p>\n</div>",
      "created_utc": 1745024679.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1k21v4u/whats_the_best_way_to_structure_a_data_science/mnut28i/",
      "parent_id": "t3_1k21v4u",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-04-18T18:04:39"
    },
    {
      "id": "mnvet04",
      "author": "DigThatData",
      "body": "Best book on the topic I'm aware of: https://guerrilla-analytics.com/",
      "body_html": "<div class=\"md\"><p>Best book on the topic I&#39;m aware of: <a href=\"https://guerrilla-analytics.com/\">https://guerrilla-analytics.com/</a></p>\n</div>",
      "created_utc": 1745033342.0,
      "score": 1,
      "ups": 1,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1k21v4u/whats_the_best_way_to_structure_a_data_science/mnvet04/",
      "parent_id": "t3_1k21v4u",
      "depth": 0,
      "is_submitter": false,
      "stickied": false,
      "edited": false,
      "distinguished": null,
      "timestamp": "2025-04-18T20:29:02"
    },
    {
      "id": "mnqv9iy",
      "author": "Content-Ad5196",
      "body": "Cookiecutter proposed project structure (https://cookiecutter-data-science.drivendata.org/) is pertinent and a very good starting point.\n\n`src/` folder makes sense particularly if you organize your code in packages and/or within `.py` scripts. Do not put notebooks in it, use them only for docs and presentation. Actual code should be in `.py` files.  \n\nI use Poetry for dependency management. It is a very good one liner: `poetry install` replaces a `setup.py` file. That said, use `pip freeze > requirements.txt` if it suits your needs, it's perfectly fine.\n\nI have had transfered data science algorithms into prod (speaking about MLOps), it is very good if the original project is well documented, structured and with dependencies. I would consider MLOps as a side discipline. Being clean will impress a lot already, especially in non computer science field.\n\n**Use version control** (Git), **be sure your main branch (and even every commit) is fully working code**. IMO these are the most important elements to really impress. It can be done via continuous integration (a simple bash file executing python formater, flake8, nbclean etc.)",
      "body_html": "<div class=\"md\"><p>Cookiecutter proposed project structure (<a href=\"https://cookiecutter-data-science.drivendata.org/\">https://cookiecutter-data-science.drivendata.org/</a>) is pertinent and a very good starting point.</p>\n\n<p><code>src/</code> folder makes sense particularly if you organize your code in packages and/or within <code>.py</code> scripts. Do not put notebooks in it, use them only for docs and presentation. Actual code should be in <code>.py</code> files.  </p>\n\n<p>I use Poetry for dependency management. It is a very good one liner: <code>poetry install</code> replaces a <code>setup.py</code> file. That said, use <code>pip freeze &gt; requirements.txt</code> if it suits your needs, it&#39;s perfectly fine.</p>\n\n<p>I have had transfered data science algorithms into prod (speaking about MLOps), it is very good if the original project is well documented, structured and with dependencies. I would consider MLOps as a side discipline. Being clean will impress a lot already, especially in non computer science field.</p>\n\n<p><strong>Use version control</strong> (Git), <strong>be sure your main branch (and even every commit) is fully working code</strong>. IMO these are the most important elements to really impress. It can be done via continuous integration (a simple bash file executing python formater, flake8, nbclean etc.)</p>\n</div>",
      "created_utc": 1744978092.0,
      "score": 3,
      "ups": 3,
      "downs": 0,
      "permalink": "/r/MLQuestions/comments/1k21v4u/whats_the_best_way_to_structure_a_data_science/mnqv9iy/",
      "parent_id": "t1_mnqrt9n",
      "depth": 1,
      "is_submitter": false,
      "stickied": false,
      "edited": true,
      "distinguished": null,
      "timestamp": "2025-04-18T05:08:12"
    }
  ],
  "total_comments": 5,
  "fetched_at": "2025-09-13T20:47:24.970134"
}